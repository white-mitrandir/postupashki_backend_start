#!/usr/bin/env python3
import os
import sys
import time
import socket
import subprocess
import threading
import signal
from pathlib import Path

try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False

try:
    from colorama import init, Fore, Style
    init()
    COLORS_AVAILABLE = True
except ImportError:
    COLORS_AVAILABLE = False

class TestRunner:
    def __init__(self):
        self.server_process = None
        self.server_port = 8080
        self.test_results = []
        self.compilation_failed = False
        self.failure_reason = ""

    def log(self, message, color=None):
        if COLORS_AVAILABLE and color:
            print(f"{color}{message}{Style.RESET_ALL}")
        else:
            print(message)

    def success(self, message):
        self.log(f"‚úÖ {message}", Fore.GREEN)

    def error(self, message):
        self.log(f"‚ùå {message}", Fore.RED)

    def info(self, message):
        self.log(f"‚ÑπÔ∏è  {message}", Fore.BLUE)

    def warning(self, message):
        self.log(f"‚ö†Ô∏è  {message}", Fore.YELLOW)

    def check_scripts_exist(self):
        required_scripts = ['compile_server.sh', 'execute_server.sh', 'compile_client.sh', 'execute_client.sh']
        missing_scripts = []

        for script in required_scripts:
            if not os.path.exists(script):
                missing_scripts.append(script)

        if missing_scripts:
            self.failure_reason = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {', '.join(missing_scripts)}"
            self.error(self.failure_reason)
            return False

        return True

    def compile_code(self):
        self.info("–ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞...")
        result = subprocess.run(['./compile_server.sh'], capture_output=True, text=True)
        if result.returncode != 0:
            self.compilation_failed = True
            self.failure_reason = f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {result.stderr.strip() or result.stdout.strip() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
            self.error(self.failure_reason)
            return False

        self.info("–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–¥–∞...")
        result = subprocess.run(['./compile_client.sh'], capture_output=True, text=True)
        if result.returncode != 0:
            self.compilation_failed = True
            self.failure_reason = f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {result.stderr.strip() or result.stdout.strip() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
            self.error(self.failure_reason)
            return False

        self.success("–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

    def start_server(self):
        try:
            self.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")

            self.server_process = subprocess.Popen(
                ['./execute_server.sh'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                preexec_fn=os.setsid if os.name != 'nt' else None
            )

            time.sleep(2)

            if self.server_process.poll() is not None:
                stdout, stderr = self.server_process.communicate()
                self.failure_reason = f"–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {stderr.decode().strip() or stdout.decode().strip() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
                self.error(self.failure_reason)
                return False

            return self.check_port_open()

        except FileNotFoundError:
            self.failure_reason = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å execute_server.sh"
            self.error(self.failure_reason)
            return False
        except Exception as e:
            self.failure_reason = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}"
            self.error(self.failure_reason)
            return False

    def check_port_open(self):
        for attempt in range(5):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(1)
                    result = s.connect_ex(('localhost', self.server_port))
                    if result == 0:
                        self.success(f"–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {self.server_port}")
                        return True
            except Exception:
                pass
            time.sleep(1)

        self.failure_reason = f"–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {self.server_port}"
        self.error(self.failure_reason)
        return False

    def test_server_response(self):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(5)
                s.connect(('localhost', self.server_port))

                data = s.recv(1024)
                response = data.decode('utf-8')

                if response == "OK\n":
                    self.success("–°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç 'OK\\n'")
                    return True
                else:
                    self.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –û–∂–∏–¥–∞–ª—Å—è 'OK\\n', –ø–æ–ª—É—á–µ–Ω: {repr(response)}")
                    return False

        except socket.timeout:
            self.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return False
        except ConnectionRefusedError:
            self.error("–°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return False
        except Exception as e:
            self.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False

    def test_multiple_connections(self):
        self.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")

        success_count = 0
        total_tests = 3

        for i in range(total_tests):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(3)
                    s.connect(('localhost', self.server_port))
                    data = s.recv(1024)
                    response = data.decode('utf-8')

                    if response == "OK\n":
                        success_count += 1

                time.sleep(0.5)

            except Exception as e:
                self.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ #{i+1}: {e}")

        if success_count == total_tests:
            self.success(f"–í—Å–µ {total_tests} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã")
            return True
        else:
            self.error(f"–£—Å–ø–µ—à–Ω–æ —Ç–æ–ª—å–∫–æ {success_count} –∏–∑ {total_tests} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            return False

    def test_client(self):
        try:
            self.info("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...")

            result = subprocess.run(['./execute_client.sh'], capture_output=True, text=True, timeout=10)

            if result.returncode == 0:
                self.success("–ö–ª–∏–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                self.info(f"–í—ã–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {result.stdout.strip()}")
                return True
            else:
                self.error(f"–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                return False

        except subprocess.TimeoutExpired:
            self.error("–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
            return False
        except FileNotFoundError:
            self.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å execute_client.sh")
            return False
        except Exception as e:
            self.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False

    def stop_server(self):
        if self.server_process:
            try:
                if os.name != 'nt':
                    os.killpg(os.getpgid(self.server_process.pid), signal.SIGTERM)
                else:
                    self.server_process.terminate()

                try:
                    self.server_process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if os.name != 'nt':
                        os.killpg(os.getpgid(self.server_process.pid), signal.SIGKILL)
                    else:
                        self.server_process.kill()

                self.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            except Exception as e:
                self.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    def run_tests(self):
        self.log("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è ‚Ññ0", Fore.CYAN)

        if not self.check_scripts_exist():
            return False

        if not self.compile_code():
            return False

        try:
            if not self.start_server():
                return False

            tests = [
                ("–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞", self.test_server_response),
                ("–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", self.test_multiple_connections),
                ("–¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞", self.test_client)
            ]

            all_passed = True
            for test_name, test_func in tests:
                self.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {test_name}")
                if test_func():
                    self.test_results.append((test_name, True))
                else:
                    self.test_results.append((test_name, False))
                    all_passed = False
                print()

            return all_passed

        finally:
            self.stop_server()

    def print_summary(self):
        print("=" * 50)
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢", Fore.CYAN)
        print("=" * 50)

        if self.compilation_failed or self.failure_reason:
            if self.failure_reason:
                self.error(f"–ü–†–û–í–ê–õ: {self.failure_reason}")
            else:
                self.error("–ü–†–û–í–ê–õ: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
            print("-" * 50)
            self.log("‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", Fore.RED)
            return

        passed = sum(1 for _, result in self.test_results if result)
        total = len(self.test_results)

        if total == 0:
            self.error("–ü–†–û–í–ê–õ: –¢–µ—Å—Ç—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã")
            print("-" * 50)
            self.log("‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", Fore.RED)
            return

        for test_name, result in self.test_results:
            if result:
                self.success(f"{test_name}")
            else:
                self.error(f"{test_name}")

        print("-" * 50)
        if passed == total:
            self.success(f"–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã: {passed}/{total}")
            self.log("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!", Fore.GREEN)
        else:
            self.error(f"–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã: {passed}/{total}")
            self.log("‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å", Fore.RED)

def main():
    os.chdir(Path(__file__).parent.parent)

    runner = TestRunner()

    try:
        success = runner.run_tests()
        runner.print_summary()
        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        runner.log("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", Fore.YELLOW)
        runner.stop_server()
        sys.exit(1)
    except Exception as e:
        runner.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        runner.stop_server()
        sys.exit(1)

if __name__ == "__main__":
    main()